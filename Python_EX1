# Python Ex1
# Submitted by: Shmuel Kaufmann, mob 054-2328635
# Submitted on 14/4/2023

# 1)    Create a program that will print your identifications.
#       Example my identifications:
#       •	Name: Alex
#       •	Last name: Kuznetsov
#       •	Age: 27
#       •	Phone number: 0527389001
# =====================================================================================

def PrintIdentitications(name,surname, age, phonenum):
    print(f"Name: {name}, Last name: {surname}, Age: {age}, Phone number: {phonenum}")

PrintIdentitications("Shmuel", "Kaufman", "27", "0542328635")

# 2)	For a string that you created please check if:
#       The character at index 7 equals ‘a’.
#       The character at index 8 equals ‘b’.
#       The character at index 9 equals ‘c’.
#       If all conditions exists please print “True”,
#       Else print False.
#       Pay attention for edge cases like the length of the string and so on.
#       Your program must not crash for any string.
# =====================================================================================
def CheckStr(string):
    if len(string) < 9:
        return 'False'
    elif string[6:9] == 'abc':
        return 'True'
    elif string[6:9] != 'abc':
        return 'False'

print(CheckStr('123456abc'))

# 3)	Write a Python program to get a single string from two given strings,
#       separated by a space and swap the first two characters of each string.
# =====================================================================================
def StrSwap(str1, str2):

    if len(str1) < 2 or len(str2) < 2:
        return 'Too short strings to swap'

    str1_temp = str1[:2]
    str2_temp = str2[:2]
    return str2_temp + str1[2:] + ' ' + str1_temp + str2[2:]

print(StrSwap('abcdef','ghijk'))


# 4)	Write a Python program to add 'ing' at the end of a given string (length should be at least 3).\
#       If the given string already ends with 'ing' then add 'ly' instead.
#       If the string length of the given string is less than 3, leave it unchanged.
# =====================================================================================
def StrAppend(str):

    if len(str) < 3:
        return str

    if str[-3:] == 'ing':
        new_str = str[:-3] + 'ly'
    else:
        new_str = str + 'ing'

    return new_str

print(StrAppend('abcing'))

# 5)	For a string (three characters and more) that you have created please create a new string
#       that follows the next rules:
#       •	The first character of the new string is the middle character of the original string.
#       •	The middle character of the new string is the last character of the original string.
#       •	The last character of the new string is the first character of the original string.
#       Example:
#       •	For odd length case, length of 9 characters:
#           Let’s assume that the middle character is 9/2 rounded down that’s means that it is 4.
#           “afffbeeec” –> “bfffceeea”
#       •	For even length case, length of 8 characters:
#           The middle character is also 4 because 8/2 equals 4.
#           “axxxbyyc” -> “bxxxcyya”
# 	    Print your new string in the following way, for even length example:
# 	    The rotated string is bxxxcyya
# =====================================================================================
def StrRotate(str):

    if len(str) < 3:
        return str

    new_str = list(str)

    new_str[0] = str[len(str)//2]
    new_str[len(str)//2] = str[-1]
    new_str[-1] = str[0]

    return ''.join(new_str)

print(StrRotate('1234567'))

# 6)	Write a Python function to insert a string in the space of the original string.
#       You can assume that there is just one space in your string.
# =====================================================================================
def StrInject(str1, str2):

    index = str1.find(' ')

    if index == -1:
        return 'No space in the 1st string'

    return str1[:index] + ' ' + str2 + ' ' + str1[index+1:]

print(StrInject('abc 123','def'))

########################
# Challenges
########################

# 7)	Write a Python program to sort a string lexicographically. Look For relevant method.
# =====================================================================================
def StrLexiSort(str):

    sorted_string = ''.join(sorted(str))

    return sorted_string

print(StrLexiSort('dsklf129853hldkhfou'))

# 8)	Write a Python program to print the following floating numbers upto 2 decimal places.
# =====================================================================================
def FloatNum(str):

    index = str.find('.')

    if int(str[index+1]) >= 5:
        float = str[:index]
        return '{:.2f}'.format(int(float) + 1)
    else:
        return str[:index + 3]

print(FloatNum('31.50168628362'))

# 9)	Write a Python program to count occurrences of a substring in a string. Look for a relevant method.
# =====================================================================================
def SubStrCount(str, sub_str):

    count = str.count(sub_str)

    return count

print(SubStrCount('abcdefghiab','ab'))


